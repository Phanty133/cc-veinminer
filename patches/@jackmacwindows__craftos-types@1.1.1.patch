diff --git a/craftos.d.ts b/craftos.d.ts
index bf9908fa5a1ace9c10a556dd06e7b294539a959a..8f20bc7387e4a3e350144a99227908d641d51ad9 100755
--- a/craftos.d.ts
+++ b/craftos.d.ts
@@ -493,10 +493,10 @@ declare class FluidStoragePeripheral implements IPeripheral {
 
 declare type ItemDetail = {
     name: string;
-    count: string;
+    count: number;
     nbt?: string;
     displayName: string;
-    maxCount: number;
+    maxCount?: number;
     damage?: number;
     maxDamage?: number;
     durability?: number;
@@ -738,9 +738,9 @@ declare namespace turtle {
   function attackUp(toolSide?: string): boolean;
   function attackDown(toolSide?: string): boolean;
 
-  function dig(toolSide?: string): boolean;
-  function digUp(toolSide?: string): boolean;
-  function digDown(toolSide?: string): boolean;
+  function dig(toolSide?: string): LuaMultiReturn<[boolean, string]>;
+  function digUp(toolSide?: string): LuaMultiReturn<[boolean, string]>;
+  function digDown(toolSide?: string): LuaMultiReturn<[boolean, string]>;
 
   function place(toolSide?: string): boolean;
   function placeUp(toolSide?: string): boolean;
@@ -758,13 +758,13 @@ declare namespace turtle {
   function compareUp(toolSide?: string): boolean;
   function compareDown(toolSide?: string): boolean;
 
-  function drop(toolSide?: string): boolean;
-  function dropUp(toolSide?: string): boolean;
-  function dropDown(toolSide?: string): boolean;
+  function drop(count?: number): boolean;
+  function dropUp(count?: number): boolean;
+  function dropDown(count?: number): boolean;
 
-  function suck(toolSide?: string): boolean;
-  function suckUp(toolSide?: string): boolean;
-  function suckDown(toolSide?: string): boolean;
+  function suck(count?: number): boolean;
+  function suckUp(count?: number): boolean;
+  function suckDown(count?: number): boolean;
 
   function refuel(): boolean;
   function refuel(quantity: number): boolean;
@@ -784,7 +784,7 @@ declare class Vector {
     public mul(this: Vector, o: number): Vector;
     public div(this: Vector, o: number): Vector;
     public unm(this: Vector): Vector;
-    public dot(this: Vector, o: Vector): Vector;
+    public dot(this: Vector, o: Vector): number;
     public cross(this: Vector, o: Vector): Vector;
     public length(this: Vector): number;
     public normalize(this: Vector): Vector;